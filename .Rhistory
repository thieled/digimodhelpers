@export
#' @return The input data frame \code{df} with an additional column containing constructed filenames.
#'
#' @examples
#' df <- data.frame(country = c("USA", "UK", "Germany"),
#'                  party = c("Democrat", "Republican", "Green"),
#'                  name = c("Joe Biden", "Donald Trump", "Angela Merkel"))
#' create_filename(df, country_var = "country", party_var = "party", name_var = "name", filename_var = "filename")
#'
#' @import textclean
#' @export
create_filename <- function(df,
platform = c("fb", "ig", "tt", "yt", "tg", "bc", "bs"),
country_var = NULL,
party_var = NULL,
name_var = NULL,
filename_var = NULL,
name_sep = "-",
lowercase = T,
replace_non_ascii = T,
filename_sep = "_"
){
# Error messages
name_index <- match(name_var, names(df))
if (is.null(name_var)||is.na(name_index))
stop("name_var column not found or invalid")
# Create filename
df[[filename_var]] <-  paste(
platform,
if(lowercase == T) tolower( if(replace_non_ascii == T) textclean::replace_non_ascii( if(!is.null(country_var)) df[[country_var]] else "") ), # country
if(lowercase == T) tolower( if(replace_non_ascii == T) textclean::replace_non_ascii( if(!is.null(party_var)) gsub("[^[:alnum:]]", "", df[[party_var]]) else "") ), # party
if(lowercase == T) tolower( if(replace_non_ascii == T) textclean::replace_non_ascii( if(!is.null(name_var)) gsub("[^[:alnum:]]", name_sep, df[[name_var]]) else "") ), # name variable
sep = filename_sep
)
return(df)
}
usethis::use_package("textclean")
df <- data.frame(country = c("USA", "UK", "Germany"),
party = c("Democrat", "Republican", "Green"),
name = c("Joe Biden", "Donald Trump", "Angela Merkel"))
create_filename(df, country_var = "country", party_var = "party", name_var = "name", filename_var = "filename")
d <- create_filename(df, country_var = "country", party_var = "party", name_var = "name", filename_var = "filename")
df <- data.frame(platform = "fb",
country = c("USA", "UK", "Germany"),
party = c("Democrat", "Republican", "Green"),
name = c("Joe Biden", "Donald Trump", "Angela Merkel"))
d <- create_filename(df, country_var = "country", party_var = "party", name_var = "name", filename_var = "filename")
d <- create_filename(df,  platform = "fb", country_var = "country", party_var = "party", name_var = "name", filename_var = "filename")
View(d)
devtools::build_readme()
devtools::check()
usethis::use_package("dplyr")
devtools::check()
rm(list=ls())
rm(list=ls())
devtools::check()
usethis::use_cc0_license()
devtools::check()
usethis::use_package("lubridate")
devtools::check()
usethis::use_package("tibble", type = "Suggests")
devtools::check()
devtools::check()
devtools::load_all()
df <- tibble::tribble(
~country, ~party, ~name, ~handle,
"at", "fpö", "Herbert Kickl", "herbertkickl",
"at", "övp", "TBD", NA,
"at", "Grüne", "Werner Kogler", "wernerkogler"
)
create_call_grid(df = df,
platform = "fb",
country_var = "country",
party_var = "party",
name_var = "name",
handle_var = "handle",
filename_var = "filename",
start_date = "2023-08-25",
end_date = "2024-01-24",
unit = "quarter")
devtools::load_all()
create_call_grid(df = df,
platform = "fb",
country_var = "country",
party_var = "party",
name_var = "name",
handle_var = "handle",
filename_var = "filename",
start_date = "2023-08-25",
end_date = "2024-01-24",
unit = "quarter")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
usethis::use_package("crowdtangler")
usethis::use_package("crowdtangler", type = "Remotes")
usethis::use_package("JBGruber/crowdtangler", remote = T)
usethis::use_dev_package("JBGruber/crowdtangler", remote = T)
usethis::use_dev_package("github::JBGruber/crowdtangler", remote = T, type = "imports")
usethis::use_dev_package("crowdtangler", remote = "JBGruber/crowdtangler", type = "imports")
usethis::use_dev_package("crowdtangler", remote = "JBGruber/crowdtangler", type = "imports")
usethis::use_package("lubridate")
usethis::use_package("logger")
usethis::use_package("purrr")
usethis::use_package("utils")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
usethis::use_package("magrittr")
usethis::use_package("tibble")
usethis::use_package("dplyr")
usethis::use_package("stringr")
usethis::use_package("stringr")
devtools::check()
devtools::check()
devtools::check()
usethis::use_package("RcppSimdJson")
usethis::use_package("data.table")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?usethis::use_dev_package()
usethis::use_dev_package(fleece, type = "Imports", remote = "thieled/fleece")
usethis::use_dev_package(thieled/fleece)
usethis::use_package("tibble")
usethis::use_package("lubridate")
usethis::use_package("dplyr")
devtools::check()
devtools::check()
devtools::check()
usethis::use_dev_package("tuber", type = "Imports", remote = TRUE)
usethis::use_package("plyr")
devtools::check()
devtools::document()
devtools::check()
devtools::check()
usethis::use_package("pbapply")
usethis::use_package("tuber")
usethis::use_package("lubridate")
devtools::check()
devtools::check()
styler::style_pkg()
devtools::check()
pkgload::dev_help('parse_filenames')
devtools
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
usethis::use_package("jsonlite", type = "Imports")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
usethis::use_package("tidytable", type = "Imports")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
usethis::use_package("readr")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
usethis::use_package("httr", type = "Imports")
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
1+1
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
git add .
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
usethis::use_git()
?RcppSimdJson
?fparse
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?head
usethis::use_package("utils")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
ames
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
usethis::use_package("traktok")
remotes::install_github("JBGruber/traktok")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?lapply
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
